
%{
                /* definitions part */

#include "y.tab.h" // generated by yacc and defines tokens
#include <stdlib.h> 
#include <stdlib.h>
extern int yylval;
void yyerror(char *message);
%}

%option yylineno
%option case-insensitive
digit [0-9]
whitespace [ \t\r\f\v]+
newline [\n]
sign [+-]

%%

">="        {return greaterEqual;}
"<="        {return lessEqual;}
"is"        {return isEqual;}
"not equal" {return notEqual;}
"log"       {return log_stm;}
"int"       |
"float"     |  
"char"      {yylval.type=strdup(yytext);return dataType;}      
"and"       {return logicOp_and;}      
"or"        {return logicOp_or;}  
"not"       {return logicOp_not;}  
"loop"      {return loop;}
"end-loop"  {return end_loop;}
"if"        {return if_statement;}
"elif"      {return elif_statement;}
"default"   {return default_statement;}
"for"       {return for;}
"["         |
"]"         |
"("         |
")"         |
"{"         |
"}"         |
";"         |
"="         |
"'"         |
"."         |
\"          {return *yytext;}

[a-z][_a-z]*                {return identifier;}
{sign}?{digit}+             { yylval.int = atoi(yytext) ;return integerVal;}
\'[a-z]\'                   {return charVal;}
{sign}?{digit}*\.?{digit}+  {yylval.float = atoi(yytext); return floatVal;}
\"(\\.|[^"])*\"             {yylval.string = strdup (yytext+1); /* skip open quote */
                                if(yylval.string[yyleng-2] != '"')
	                                warning("Unterminated character string",(char *)0);
	                            else
	                            yylval.string[yyleng-2] = '\0'; /* remove close quote */
                            return StringVal;}
{newline}                   {yylineno++; return yylineno;}
{whitespace}                ;
.                           { yyerror("invalid token => %s line %d", *message, yylineno); }

%%

int yywrap(void){return 1;}
int main(void) {
    yylex();
}
